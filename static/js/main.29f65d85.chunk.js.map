{"version":3,"sources":["components/Master.js","components/Slave.js","components/Main.js","App.js","index.js"],"names":["Master","MasterWrap","type","defaultValue","min","max","onChange","e","props","value","target","className","onClick","ev","condition","state","this","Component","styled","div","Slave","visible","SlaveWrap","range","Main","changeValue","setState","changeCondition","displaynone","MainWrap","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAIaA,EAAb,4JACE,WAAU,IAAD,OACP,OACE,eAACC,EAAD,WACE,uBAAOC,KAAK,QAAQC,aAAa,IAAIC,IAAI,IAAIC,IAAI,MAAMC,SACrD,SAACC,GAAQ,EAAKC,MAAMC,MAAMF,EAAEG,OAAOD,UACrC,wBAAQE,UAAU,QAAQC,QAAS,SAACC,GAClC,EAAKL,MAAMM,YACP,EAAKN,MAAMO,MAAMD,UACnBD,EAAGH,OAAOC,UAAY,MACfE,EAAGH,OAAOC,UAAY,SAJjC,SAOKK,KAAKR,MAAMO,MAAMD,UAAa,KAAO,eAblD,GAA4BG,aAqBtBhB,EAAaiB,IAAOC,IAAV,6dA2BDnB,IChDFoB,EAAb,4JACE,WAQE,OANKJ,KAAKR,MAAMO,MAAMD,UAGpBE,KAAKK,QAAU,UAFfL,KAAKK,QAAU,GAMf,cAACC,EAAD,CAAWX,UAAS,UAAKK,KAAKK,SAA9B,SACE,8BAAML,KAAKR,MAAMO,MAAMQ,cAX/B,GAA2BN,aAiBrBK,EAAYJ,IAAOC,IAAV,qOAaAC,IC5BFI,EAAb,4MAEET,MAAQ,CACNQ,MAAO,EACPT,WAAW,GAJf,EAOEW,YAAc,SAAChB,GACb,EAAKiB,SAAS,CACZH,MAAOd,KATb,EAaEkB,gBAAkB,WAChB,EAAKD,SAAS,CACZZ,WAAY,EAAKC,MAAMD,aAf7B,EAmBEc,YAAc,OAnBhB,4CAqBE,WACE,OACE,eAACC,EAAD,WACE,cAAC,EAAD,CAAQpB,MAAOO,KAAKS,YAAaX,UAAWE,KAAKW,gBAAiBZ,MAAOC,KAAKD,QAE3EC,KAAKD,MAAMD,UAAa,cAAC,EAAD,CAAOC,MAAOC,KAAKD,QAAY,cAAC,EAAD,CAAOA,MAAOC,KAAKD,MAAOJ,UAAU,gBA1BtG,GAA0BM,aAiCpBY,EAAWX,IAAOC,IAAV,sQAWCK,ICxCAM,MANf,WACE,OACE,cAAC,EAAD,KCAJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.29f65d85.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport '../App.css'\r\n\r\nexport class Master extends Component {\r\n  render() {\r\n    return (\r\n      <MasterWrap>\r\n        <input type=\"range\" defaultValue=\"0\" min=\"0\" max=\"100\" onChange={\r\n          (e) => { this.props.value(e.target.value) }} />\r\n        <button className='green' onClick={(ev) => {\r\n          this.props.condition()\r\n          if (this.props.state.condition) {\r\n            ev.target.className = 'red'\r\n          } else { ev.target.className = 'green' }\r\n        }}>\r\n          {\r\n            (this.props.state.condition) ? 'On' : 'Off'\r\n          }\r\n        </button>\r\n      </MasterWrap>\r\n    )\r\n  }\r\n}\r\n\r\nconst MasterWrap = styled.div`\r\n grid-area: master;\r\n border: 3px solid black;\r\n display:flex;\r\n align-items: center;\r\n justify-content:space-around;\r\n flex-direction: column;\r\n height:100%;\r\n width:100%;\r\n border-radius:20px;\r\n input {\r\n   width: 200px;\r\n   margin-top:20px;\r\n   cursor:pointer;\r\n }\r\n button {\r\n   margin-bottom:20px;\r\n   width: 100px;\r\n   height: 40px;\r\n   font-size: 20px;\r\n   font-weight:bold;\r\n   border-radius:10px;\r\n   cursor:pointer;\r\n   outline:none;\r\n }\r\n`\r\n\r\nexport default Master\r\n","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport '../App.css'\r\n\r\nexport class Slave extends Component {\r\n  render() {\r\n\r\n    if (!this.props.state.condition) {\r\n      this.visible = ''\r\n    } else {\r\n      this.visible = 'visible'\r\n    }\r\n\r\n    return (\r\n      <SlaveWrap className={`${this.visible}`} >\r\n        <div>{this.props.state.range}</div>\r\n      </SlaveWrap >\r\n    )\r\n  }\r\n}\r\n\r\nconst SlaveWrap = styled.div`\r\n grid-area: slave;\r\n border: 3px solid black;\r\n height:100%;\r\n width:100%;\r\n display:flex;\r\n align-items: center;\r\n justify-content:center;\r\n border-radius:20px;\r\n font-size:40px;\r\n font-weight:bold;\r\n`\r\n\r\nexport default Slave\r\n","import React, { Component } from 'react'\r\nimport Master from './Master'\r\nimport Slave from './Slave'\r\nimport styled from 'styled-components'\r\n// import './App.css'\r\n\r\nexport class Main extends Component {\r\n\r\n  state = {\r\n    range: 0,\r\n    condition: true,\r\n  }\r\n\r\n  changeValue = (value) => {\r\n    this.setState({\r\n      range: value\r\n    })\r\n  }\r\n\r\n  changeCondition = () => {\r\n    this.setState({\r\n      condition: !this.state.condition\r\n    })\r\n  }\r\n\r\n  displaynone = 'abra'\r\n\r\n  render() {\r\n    return (\r\n      <MainWrap>\r\n        <Master value={this.changeValue} condition={this.changeCondition} state={this.state} />\r\n        {\r\n          (this.state.condition) ? <Slave state={this.state} /> : <Slave state={this.state} className=\"abra\" />\r\n        }\r\n      </MainWrap>\r\n    )\r\n  }\r\n}\r\n\r\nconst MainWrap = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr repeat(2, 250px) 1fr;\r\n  grid-template-rows: 130px;\r\n  grid-template-areas: '. master slave .';\r\n  align-items:center;\r\n  justify-items:center;  \r\n  margin-top: 100px;\r\n  grid-gap:20px;\r\n`\r\n\r\nexport default Main","// import logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}